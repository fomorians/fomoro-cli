#!/usr/bin/env node

var program = require('commander');
var request = require('request');
var fs = require('fs');
var path = require('path');
var zlib = require('zlib');
var ProgressBar = require('progress');
var Promise = require('es6-promise').Promise;

var temp = require('temp');
temp.track();

var UPLOAD_URL = 'http://localhost:3000/upload';

function compress(filepath) {
  console.log('compressing data...');

  return new Promise(function(resolve, reject) {
    var gzip = zlib.createGzip();
    var rstream = fs.createReadStream(filepath);
    var wstream = temp.createWriteStream();

    rstream.pipe(gzip).pipe(wstream);

    var progress;

    rstream.on('open', function(fd) {
      var total = fs.fstatSync(fd).size;
      progress = new ProgressBar('compressing [:bar] :percent :etas', {
        total: total
      });
    });

    rstream.on('data', function(chunk) {
      progress.tick(chunk.length);
    });

    wstream.on('finish', function() {
      console.log('compression complete');
      resolve(wstream);
    });
  });
}

function upload(metadata, stream) {
  console.log('uploading data...');

  return new Promise(function(resolve, reject) {
    var req = request.post(UPLOAD_URL, function(err, res, body) {
      if (err) {
        reject(err);
      } else {
        console.log('upload complete', body);
        resolve(body);
      }
    });

    var rstream = fs.createReadStream(stream.path);

    var form = req.form();
    form.append('metadata', JSON.stringify(metadata));
    form.append('blob', rstream);

    var progress;

    stream.on('data', function(chunk) {
      progress.tick(chunk.length);
    });

    req.on('request', function() {
      var total = req.headers['content-length'];
      progress = new ProgressBar('uploading [:bar] :percent :etas', {
        total: total
      });
    });
  });
}

program
  .action(function(confpath) {
    var metadata = JSON.parse(fs.readFileSync(confpath));
    // TODO: validate metadata

    var relpath = metadata.dataset || metadata.model;
    var abspath = path.resolve(path.dirname(confpath), relpath);

    compress(abspath).then(function(stream) {
      return upload(metadata, stream);
    }).then(function(body) {
      console.log(body);
    }, function(err) {
      console.error(err.stack);
    });
  })
  .parse(process.argv);
